//
// Credential.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Credential: Codable, JSONEncodable, Hashable {

    /** The first time this webAuthn device was used to authenticate the user */
    public var createdAt: String
    /** The CredID for this webAuthn device (encoded to match what is stored in psg_cred_obj) */
    public var credId: String
    /** The friendly name for the webAuthn device used to authenticate */
    public var friendlyName: String
    /** The ID of the webAuthn device used for authentication */
    public var id: String
    /** The last time this webAuthn device was used to authenticate the user */
    public var lastLoginAt: String
    public var type: WebAuthnType
    /** The last time this webAuthn device was updated */
    public var updatedAt: String
    /** How many times this webAuthn device has been used to authenticate the user */
    public var usageCount: Int
    /** The UserID for this webAuthn device */
    public var userId: String
    public var icons: WebAuthnIcons

    public init(createdAt: String, credId: String, friendlyName: String, id: String, lastLoginAt: String, type: WebAuthnType, updatedAt: String, usageCount: Int, userId: String, icons: WebAuthnIcons) {
        self.createdAt = createdAt
        self.credId = credId
        self.friendlyName = friendlyName
        self.id = id
        self.lastLoginAt = lastLoginAt
        self.type = type
        self.updatedAt = updatedAt
        self.usageCount = usageCount
        self.userId = userId
        self.icons = icons
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdAt = "created_at"
        case credId = "cred_id"
        case friendlyName = "friendly_name"
        case id
        case lastLoginAt = "last_login_at"
        case type
        case updatedAt = "updated_at"
        case usageCount = "usage_count"
        case userId = "user_id"
        case icons
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(credId, forKey: .credId)
        try container.encode(friendlyName, forKey: .friendlyName)
        try container.encode(id, forKey: .id)
        try container.encode(lastLoginAt, forKey: .lastLoginAt)
        try container.encode(type, forKey: .type)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(usageCount, forKey: .usageCount)
        try container.encode(userId, forKey: .userId)
        try container.encode(icons, forKey: .icons)
    }
}

