//
// CredentialAssertionResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CredentialAssertionResponse: Codable, JSONEncodable, Hashable {

    public var authenticatorAttachment: String?
    public var clientExtensionResults: AnyCodable?
    /** ID is The credential’s identifier. The requirements for the identifier are distinct for each type of credential. It might represent a username for username/password tuples, for example. */
    public var id: String?
    public var rawId: String?
    public var response: CredentialAssertionResponseResponse?
    /** Type is the value of the object’s interface object's [[type]] slot, which specifies the credential type represented by this object. This should be type \"public-key\" for Webauthn credentials. */
    public var type: String?

    public init(authenticatorAttachment: String? = nil, clientExtensionResults: AnyCodable? = nil, id: String? = nil, rawId: String? = nil, response: CredentialAssertionResponseResponse? = nil, type: String? = nil) {
        self.authenticatorAttachment = authenticatorAttachment
        self.clientExtensionResults = clientExtensionResults
        self.id = id
        self.rawId = rawId
        self.response = response
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case authenticatorAttachment
        case clientExtensionResults
        case id
        case rawId
        case response
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(authenticatorAttachment, forKey: .authenticatorAttachment)
        try container.encodeIfPresent(clientExtensionResults, forKey: .clientExtensionResults)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(rawId, forKey: .rawId)
        try container.encodeIfPresent(response, forKey: .response)
        try container.encodeIfPresent(type, forKey: .type)
    }
}

