//
// CurrentUser.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CurrentUser: Codable, JSONEncodable, Hashable {

    /** When this user was created */
    public var createdAt: String
    /** The user's email */
    public var email: String
    /** Whether or not the user's email has been verified */
    public var emailVerified: Bool
    /** The user ID */
    public var id: String
    /** The last time this user logged in */
    public var lastLoginAt: String
    /** How many times the user has successfully logged in */
    public var loginCount: Int
    /** The user's phone */
    public var phone: String
    /** Whether or not the user's phone has been verified */
    public var phoneVerified: Bool
    public var socialConnections: UserSocialConnections
    public var status: UserStatus
    /** When this user was last updated */
    public var updatedAt: String
    public var userMetadata: AnyCodable?
    /** Whether or not the user has authenticated via webAuthn before (if len(WebAuthnDevices) > 0) */
    public var webauthn: Bool
    /** The list of devices this user has authenticated with via webAuthn */
    public var webauthnDevices: [Credential]
    /** List of credential types that user has created */
    public var webauthnTypes: [WebAuthnType]

    public init(createdAt: String, email: String, emailVerified: Bool, id: String, lastLoginAt: String, loginCount: Int, phone: String, phoneVerified: Bool, socialConnections: UserSocialConnections, status: UserStatus, updatedAt: String, userMetadata: AnyCodable?, webauthn: Bool, webauthnDevices: [Credential], webauthnTypes: [WebAuthnType]) {
        self.createdAt = createdAt
        self.email = email
        self.emailVerified = emailVerified
        self.id = id
        self.lastLoginAt = lastLoginAt
        self.loginCount = loginCount
        self.phone = phone
        self.phoneVerified = phoneVerified
        self.socialConnections = socialConnections
        self.status = status
        self.updatedAt = updatedAt
        self.userMetadata = userMetadata
        self.webauthn = webauthn
        self.webauthnDevices = webauthnDevices
        self.webauthnTypes = webauthnTypes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdAt = "created_at"
        case email
        case emailVerified = "email_verified"
        case id
        case lastLoginAt = "last_login_at"
        case loginCount = "login_count"
        case phone
        case phoneVerified = "phone_verified"
        case socialConnections = "social_connections"
        case status
        case updatedAt = "updated_at"
        case userMetadata = "user_metadata"
        case webauthn
        case webauthnDevices = "webauthn_devices"
        case webauthnTypes = "webauthn_types"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(email, forKey: .email)
        try container.encode(emailVerified, forKey: .emailVerified)
        try container.encode(id, forKey: .id)
        try container.encode(lastLoginAt, forKey: .lastLoginAt)
        try container.encode(loginCount, forKey: .loginCount)
        try container.encode(phone, forKey: .phone)
        try container.encode(phoneVerified, forKey: .phoneVerified)
        try container.encode(socialConnections, forKey: .socialConnections)
        try container.encode(status, forKey: .status)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(userMetadata, forKey: .userMetadata)
        try container.encode(webauthn, forKey: .webauthn)
        try container.encode(webauthnDevices, forKey: .webauthnDevices)
        try container.encode(webauthnTypes, forKey: .webauthnTypes)
    }
}

