//
// App.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct App: Codable, JSONEncodable, Hashable {

    public enum AuthFallbackMethod: String, Codable, CaseIterable {
        case magicLink = "magic_link"
        case otp = "otp"
        case _none = "none"
    }
    public var allowedIdentifier: String
    /** Deprecated Property. Please refer to `auth_methods` to view settings for individual authentication methods. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var authFallbackMethod: AuthFallbackMethod
    /** Deprecated Property. Please refer to `auth_methods` to view settings for individual authentication methods. */
    @available(*, deprecated, message: "This property is deprecated.")
    public var authFallbackMethodTtl: Int
    public var authMethods: AuthMethods
    public var authOrigin: String
    public var defaultLanguage: String
    public var elementCustomization: ElementCustomization
    public var elementCustomizationDark: ElementCustomization
    public var ephemeral: Bool
    public var id: String
    public var layouts: Layouts
    public var loginUrl: String
    public var name: String
    public var passageBranding: Bool
    public var publicSignup: Bool
    public var profileManagement: Bool
    public var redirectUrl: String
    public var requireEmailVerification: Bool
    public var requireIdentifierVerification: Bool
    public var requiredIdentifier: String
    public var rsaPublicKey: String
    public var sessionTimeoutLength: Int
    public var socialConnections: SocialConnections
    public var userMetadataSchema: [UserMetadataField]

    public init(allowedIdentifier: String, authFallbackMethod: AuthFallbackMethod, authFallbackMethodTtl: Int, authMethods: AuthMethods, authOrigin: String, defaultLanguage: String, elementCustomization: ElementCustomization, elementCustomizationDark: ElementCustomization, ephemeral: Bool, id: String, layouts: Layouts, loginUrl: String, name: String, passageBranding: Bool, publicSignup: Bool, profileManagement: Bool, redirectUrl: String, requireEmailVerification: Bool, requireIdentifierVerification: Bool, requiredIdentifier: String, rsaPublicKey: String, sessionTimeoutLength: Int, socialConnections: SocialConnections, userMetadataSchema: [UserMetadataField]) {
        self.allowedIdentifier = allowedIdentifier
        self.authFallbackMethod = authFallbackMethod
        self.authFallbackMethodTtl = authFallbackMethodTtl
        self.authMethods = authMethods
        self.authOrigin = authOrigin
        self.defaultLanguage = defaultLanguage
        self.elementCustomization = elementCustomization
        self.elementCustomizationDark = elementCustomizationDark
        self.ephemeral = ephemeral
        self.id = id
        self.layouts = layouts
        self.loginUrl = loginUrl
        self.name = name
        self.passageBranding = passageBranding
        self.publicSignup = publicSignup
        self.profileManagement = profileManagement
        self.redirectUrl = redirectUrl
        self.requireEmailVerification = requireEmailVerification
        self.requireIdentifierVerification = requireIdentifierVerification
        self.requiredIdentifier = requiredIdentifier
        self.rsaPublicKey = rsaPublicKey
        self.sessionTimeoutLength = sessionTimeoutLength
        self.socialConnections = socialConnections
        self.userMetadataSchema = userMetadataSchema
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case allowedIdentifier = "allowed_identifier"
        case authFallbackMethod = "auth_fallback_method"
        case authFallbackMethodTtl = "auth_fallback_method_ttl"
        case authMethods = "auth_methods"
        case authOrigin = "auth_origin"
        case defaultLanguage = "default_language"
        case elementCustomization = "element_customization"
        case elementCustomizationDark = "element_customization_dark"
        case ephemeral
        case id
        case layouts
        case loginUrl = "login_url"
        case name
        case passageBranding = "passage_branding"
        case publicSignup = "public_signup"
        case profileManagement = "profile_management"
        case redirectUrl = "redirect_url"
        case requireEmailVerification = "require_email_verification"
        case requireIdentifierVerification = "require_identifier_verification"
        case requiredIdentifier = "required_identifier"
        case rsaPublicKey = "rsa_public_key"
        case sessionTimeoutLength = "session_timeout_length"
        case socialConnections = "social_connections"
        case userMetadataSchema = "user_metadata_schema"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(allowedIdentifier, forKey: .allowedIdentifier)
        try container.encode(authFallbackMethod, forKey: .authFallbackMethod)
        try container.encode(authFallbackMethodTtl, forKey: .authFallbackMethodTtl)
        try container.encode(authMethods, forKey: .authMethods)
        try container.encode(authOrigin, forKey: .authOrigin)
        try container.encode(defaultLanguage, forKey: .defaultLanguage)
        try container.encode(elementCustomization, forKey: .elementCustomization)
        try container.encode(elementCustomizationDark, forKey: .elementCustomizationDark)
        try container.encode(ephemeral, forKey: .ephemeral)
        try container.encode(id, forKey: .id)
        try container.encode(layouts, forKey: .layouts)
        try container.encode(loginUrl, forKey: .loginUrl)
        try container.encode(name, forKey: .name)
        try container.encode(passageBranding, forKey: .passageBranding)
        try container.encode(publicSignup, forKey: .publicSignup)
        try container.encode(profileManagement, forKey: .profileManagement)
        try container.encode(redirectUrl, forKey: .redirectUrl)
        try container.encode(requireEmailVerification, forKey: .requireEmailVerification)
        try container.encode(requireIdentifierVerification, forKey: .requireIdentifierVerification)
        try container.encode(requiredIdentifier, forKey: .requiredIdentifier)
        try container.encode(rsaPublicKey, forKey: .rsaPublicKey)
        try container.encode(sessionTimeoutLength, forKey: .sessionTimeoutLength)
        try container.encode(socialConnections, forKey: .socialConnections)
        try container.encode(userMetadataSchema, forKey: .userMetadataSchema)
    }
}

