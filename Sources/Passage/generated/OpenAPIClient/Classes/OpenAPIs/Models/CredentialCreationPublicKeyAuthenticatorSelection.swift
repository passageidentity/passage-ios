//
// CredentialCreationPublicKeyAuthenticatorSelection.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CredentialCreationPublicKeyAuthenticatorSelection: Codable, JSONEncodable, Hashable {

    /** AuthenticatorAttachment If this member is present, eligible authenticators are filtered to only authenticators attached with the specified AuthenticatorAttachment enum. */
    public var authenticatorAttachment: String?
    /** RequireResidentKey this member describes the Relying Party's requirements regarding resident credentials. If the parameter is set to true, the authenticator MUST create a client-side-resident public key credential source when creating a public key credential. */
    public var requireResidentKey: Bool?
    /** ResidentKey this member describes the Relying Party's requirements regarding resident credentials per Webauthn Level 2. */
    public var residentKey: String?
    /** UserVerification This member describes the Relying Party's requirements regarding user verification for the create() operation. Eligible authenticators are filtered to only those capable of satisfying this requirement. */
    public var userVerification: String?

    public init(authenticatorAttachment: String? = nil, requireResidentKey: Bool? = nil, residentKey: String? = nil, userVerification: String? = nil) {
        self.authenticatorAttachment = authenticatorAttachment
        self.requireResidentKey = requireResidentKey
        self.residentKey = residentKey
        self.userVerification = userVerification
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case authenticatorAttachment
        case requireResidentKey
        case residentKey
        case userVerification
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(authenticatorAttachment, forKey: .authenticatorAttachment)
        try container.encodeIfPresent(requireResidentKey, forKey: .requireResidentKey)
        try container.encodeIfPresent(residentKey, forKey: .residentKey)
        try container.encodeIfPresent(userVerification, forKey: .userVerification)
    }
}

