//
// LoginAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class LoginAPI {

    /**
     Login with Magic Link
     
     - parameter appId: (path) App ID 
     - parameter loginMagicLinkRequest: (body) User Data 
     - returns: LoginMagicLinkResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func loginMagicLink(appId: String, loginMagicLinkRequest: LoginMagicLinkRequest) async throws -> LoginMagicLinkResponse {
        return try await loginMagicLinkWithRequestBuilder(appId: appId, loginMagicLinkRequest: loginMagicLinkRequest).execute().body
    }

    /**
     Login with Magic Link
     - POST /apps/{app_id}/login/magic-link
     - Send a login email or SMS to the user. The user will receive an email or text with a link to complete their login.
     - parameter appId: (path) App ID 
     - parameter loginMagicLinkRequest: (body) User Data 
     - returns: RequestBuilder<LoginMagicLinkResponse> 
     */
    open class func loginMagicLinkWithRequestBuilder(appId: String, loginMagicLinkRequest: LoginMagicLinkRequest) -> RequestBuilder<LoginMagicLinkResponse> {
        var localVariablePath = "/apps/{app_id}/login/magic-link"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loginMagicLinkRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LoginMagicLinkResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Login with OTP
     
     - parameter appId: (path) App ID 
     - parameter loginOneTimePasscodeRequest: (body) User Data 
     - returns: OneTimePasscodeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func loginOneTimePasscode(appId: String, loginOneTimePasscodeRequest: LoginOneTimePasscodeRequest) async throws -> OneTimePasscodeResponse {
        return try await loginOneTimePasscodeWithRequestBuilder(appId: appId, loginOneTimePasscodeRequest: loginOneTimePasscodeRequest).execute().body
    }

    /**
     Login with OTP
     - POST /apps/{app_id}/login/otp
     - Send a login email or SMS to the user. The user will receive an email or text with a one-time passcode to complete their login.
     - parameter appId: (path) App ID 
     - parameter loginOneTimePasscodeRequest: (body) User Data 
     - returns: RequestBuilder<OneTimePasscodeResponse> 
     */
    open class func loginOneTimePasscodeWithRequestBuilder(appId: String, loginOneTimePasscodeRequest: LoginOneTimePasscodeRequest) -> RequestBuilder<OneTimePasscodeResponse> {
        var localVariablePath = "/apps/{app_id}/login/otp"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loginOneTimePasscodeRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OneTimePasscodeResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Finish WebAuthn Login
     
     - parameter appId: (path) App ID 
     - parameter loginWebAuthnFinishRequest: (body) User Data 
     - returns: AuthResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func loginWebauthnFinish(appId: String, loginWebAuthnFinishRequest: LoginWebAuthnFinishRequest) async throws -> AuthResponse {
        return try await loginWebauthnFinishWithRequestBuilder(appId: appId, loginWebAuthnFinishRequest: loginWebAuthnFinishRequest).execute().body
    }

    /**
     Finish WebAuthn Login
     - POST /apps/{app_id}/login/webauthn/finish
     - Complete a WebAuthn login and authenticate the user. This endpoint accepts and verifies the response from `navigator.credential.get()` and returns an authentication token for the user.
     - parameter appId: (path) App ID 
     - parameter loginWebAuthnFinishRequest: (body) User Data 
     - returns: RequestBuilder<AuthResponse> 
     */
    open class func loginWebauthnFinishWithRequestBuilder(appId: String, loginWebAuthnFinishRequest: LoginWebAuthnFinishRequest) -> RequestBuilder<AuthResponse> {
        var localVariablePath = "/apps/{app_id}/login/webauthn/finish"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loginWebAuthnFinishRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Start WebAuthn Login
     
     - parameter appId: (path) App ID 
     - parameter loginWebAuthnStartRequest: (body) User Data (optional)
     - returns: LoginWebAuthnStartResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func loginWebauthnStart(appId: String, loginWebAuthnStartRequest: LoginWebAuthnStartRequest? = nil) async throws -> LoginWebAuthnStartResponse {
        return try await loginWebauthnStartWithRequestBuilder(appId: appId, loginWebAuthnStartRequest: loginWebAuthnStartRequest).execute().body
    }

    /**
     Start WebAuthn Login
     - POST /apps/{app_id}/login/webauthn/start
     - Initiate a WebAuthn login for a user. This endpoint creates a WebAuthn credential assertion challenge that is used to perform the login ceremony from the browser.
     - parameter appId: (path) App ID 
     - parameter loginWebAuthnStartRequest: (body) User Data (optional)
     - returns: RequestBuilder<LoginWebAuthnStartResponse> 
     */
    open class func loginWebauthnStartWithRequestBuilder(appId: String, loginWebAuthnStartRequest: LoginWebAuthnStartRequest? = nil) -> RequestBuilder<LoginWebAuthnStartResponse> {
        var localVariablePath = "/apps/{app_id}/login/webauthn/start"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: loginWebAuthnStartRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LoginWebAuthnStartResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
