//
// OTPAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class OTPAPI {

    /**
     Authenticate OTP
     
     - parameter appId: (path) App ID 
     - parameter activateOneTimePasscodeRequest: (body) User Data 
     - returns: AuthResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func activateOneTimePasscode(appId: String, activateOneTimePasscodeRequest: ActivateOneTimePasscodeRequest) async throws -> AuthResponse {
        return try await activateOneTimePasscodeWithRequestBuilder(appId: appId, activateOneTimePasscodeRequest: activateOneTimePasscodeRequest).execute().body
    }

    /**
     Authenticate OTP
     - POST /apps/{app_id}/otp/activate
     - Authenticate a one-time passcode for a user. This endpoint checks that the one-time passcode is valid, then returns an authentication token for the user.
     - parameter appId: (path) App ID 
     - parameter activateOneTimePasscodeRequest: (body) User Data 
     - returns: RequestBuilder<AuthResponse> 
     */
    open class func activateOneTimePasscodeWithRequestBuilder(appId: String, activateOneTimePasscodeRequest: ActivateOneTimePasscodeRequest) -> RequestBuilder<AuthResponse> {
        var localVariablePath = "/apps/{app_id}/otp/activate"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: activateOneTimePasscodeRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
