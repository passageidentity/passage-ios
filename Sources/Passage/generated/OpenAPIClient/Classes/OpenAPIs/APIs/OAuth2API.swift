//
// OAuth2API.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class OAuth2API {

    /**
     * enum for parameter error
     */
    public enum ModelError_appleOauth2Callback: String, CaseIterable {
        case userCancelledAuthorize = "user_cancelled_authorize"
    }

    /**
     Handle Apple's OAuth2 callback
     
     - parameter appId: (path) App ID 
     - parameter state: (form) The state contained in the authorization request. 
     - parameter code: (form) A single-use authorization grant code that’s valid for five minutes. (optional)
     - parameter idToken: (form) A JWT containing the user’s identity information. (optional)
     - parameter user: (form) A JSON string containing the data requested in the scope property. (optional)
     - parameter error: (form) The error returned by Apple. (optional)
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appleOauth2Callback(appId: String, state: String, code: String? = nil, idToken: String? = nil, user: String? = nil, error: ModelError_appleOauth2Callback? = nil) async throws {
        return try await appleOauth2CallbackWithRequestBuilder(appId: appId, state: state, code: code, idToken: idToken, user: user, error: error).execute().body
    }

    /**
     Handle Apple's OAuth2 callback
     - POST /apps/{app_id}/social/oauth2_callback
     - parameter appId: (path) App ID 
     - parameter state: (form) The state contained in the authorization request. 
     - parameter code: (form) A single-use authorization grant code that’s valid for five minutes. (optional)
     - parameter idToken: (form) A JWT containing the user’s identity information. (optional)
     - parameter user: (form) A JSON string containing the data requested in the scope property. (optional)
     - parameter error: (form) The error returned by Apple. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func appleOauth2CallbackWithRequestBuilder(appId: String, state: String, code: String? = nil, idToken: String? = nil, user: String? = nil, error: ModelError_appleOauth2Callback? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/apps/{app_id}/social/oauth2_callback"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "code": code?.encodeToJSON(),
            "id_token": idToken?.encodeToJSON(),
            "state": state.encodeToJSON(),
            "user": user?.encodeToJSON(),
            "error": error?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter error
     */
    public enum ModelError_appleOauth2CallbackDefaultDev: String, CaseIterable {
        case userCancelledAuthorize = "user_cancelled_authorize"
    }

    /**
     Handle Apple's OAuth2 callback for the default developer credentials
     
     - parameter state: (form) The state contained in the authorization request. 
     - parameter code: (form) A single-use authorization grant code that’s valid for five minutes. (optional)
     - parameter idToken: (form) A JWT containing the user’s identity information. (optional)
     - parameter user: (form) A JSON string containing the data requested in the scope property. (optional)
     - parameter error: (form) The error returned by Apple. (optional)
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func appleOauth2CallbackDefaultDev(state: String, code: String? = nil, idToken: String? = nil, user: String? = nil, error: ModelError_appleOauth2CallbackDefaultDev? = nil) async throws {
        return try await appleOauth2CallbackDefaultDevWithRequestBuilder(state: state, code: code, idToken: idToken, user: user, error: error).execute().body
    }

    /**
     Handle Apple's OAuth2 callback for the default developer credentials
     - POST /social/oauth2_callback
     - parameter state: (form) The state contained in the authorization request. 
     - parameter code: (form) A single-use authorization grant code that’s valid for five minutes. (optional)
     - parameter idToken: (form) A JWT containing the user’s identity information. (optional)
     - parameter user: (form) A JSON string containing the data requested in the scope property. (optional)
     - parameter error: (form) The error returned by Apple. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func appleOauth2CallbackDefaultDevWithRequestBuilder(state: String, code: String? = nil, idToken: String? = nil, user: String? = nil, error: ModelError_appleOauth2CallbackDefaultDev? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/social/oauth2_callback"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "code": code?.encodeToJSON(),
            "id_token": idToken?.encodeToJSON(),
            "state": state.encodeToJSON(),
            "user": user?.encodeToJSON(),
            "error": error?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Link an existing account to an OAuth2 connection.
     
     - parameter appId: (path) App ID 
     - parameter code: (query) The code given from the OAuth2 redirect 
     - parameter verifier: (query) The verifier the client originally sent to the OAuth2 provider 
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func currentuserSocialLinkAccount(appId: String, code: String, verifier: String) async throws {
        return try await currentuserSocialLinkAccountWithRequestBuilder(appId: appId, code: code, verifier: verifier).execute().body
    }

    /**
     Link an existing account to an OAuth2 connection.
     - GET /apps/{app_id}/currentuser/social/link_account
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter appId: (path) App ID 
     - parameter code: (query) The code given from the OAuth2 redirect 
     - parameter verifier: (query) The verifier the client originally sent to the OAuth2 provider 
     - returns: RequestBuilder<Void> 
     */
    open class func currentuserSocialLinkAccountWithRequestBuilder(appId: String, code: String, verifier: String) -> RequestBuilder<Void> {
        var localVariablePath = "/apps/{app_id}/currentuser/social/link_account"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "code": (wrappedValue: code.encodeToJSON(), isExplode: true),
            "verifier": (wrappedValue: verifier.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Exchange native mobile identity token for an auth token.
     
     - parameter appId: (path) App ID 
     - parameter idTokenRequest: (body)  
     - returns: AuthResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func exchangeSocialIdToken(appId: String, idTokenRequest: IdTokenRequest) async throws -> AuthResponse {
        return try await exchangeSocialIdTokenWithRequestBuilder(appId: appId, idTokenRequest: idTokenRequest).execute().body
    }

    /**
     Exchange native mobile identity token for an auth token.
     - POST /apps/{app_id}/social/id_token
     - parameter appId: (path) App ID 
     - parameter idTokenRequest: (body)  
     - returns: RequestBuilder<AuthResponse> 
     */
    open class func exchangeSocialIdTokenWithRequestBuilder(appId: String, idTokenRequest: IdTokenRequest) -> RequestBuilder<AuthResponse> {
        var localVariablePath = "/apps/{app_id}/social/id_token"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: idTokenRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Exchange OAuth2 connection data for an auth token.
     
     - parameter appId: (path) App ID 
     - parameter code: (query) The code given from the OAuth2 redirect 
     - parameter verifier: (query) The verifier the client originally sent to the OAuth2 provider 
     - returns: AuthResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func exchangeSocialToken(appId: String, code: String, verifier: String) async throws -> AuthResponse {
        return try await exchangeSocialTokenWithRequestBuilder(appId: appId, code: code, verifier: verifier).execute().body
    }

    /**
     Exchange OAuth2 connection data for an auth token.
     - GET /apps/{app_id}/social/token
     - parameter appId: (path) App ID 
     - parameter code: (query) The code given from the OAuth2 redirect 
     - parameter verifier: (query) The verifier the client originally sent to the OAuth2 provider 
     - returns: RequestBuilder<AuthResponse> 
     */
    open class func exchangeSocialTokenWithRequestBuilder(appId: String, code: String, verifier: String) -> RequestBuilder<AuthResponse> {
        var localVariablePath = "/apps/{app_id}/social/token"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "code": (wrappedValue: code.encodeToJSON(), isExplode: true),
            "verifier": (wrappedValue: verifier.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter connectionType
     */
    public enum ConnectionType_getAuthorize: String, CaseIterable {
        case apple = "apple"
        case github = "github"
        case google = "google"
        case passage = "passage"
    }

    /**
     Kick off OAuth2 flow
     
     - parameter appId: (path) App ID 
     - parameter redirectUri: (query) The URL to redirect to after the OAuth2 flow is complete. 
     - parameter codeChallenge: (query) Code challenge. 
     - parameter codeChallengeMethod: (query) Code challenge method. 
     - parameter connectionType: (query) connection type; google, github, apple, or passage to login with 
     - parameter state: (query) The state to pass through to the redirect URI. (optional)
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAuthorize(appId: String, redirectUri: String, codeChallenge: String, codeChallengeMethod: String, connectionType: ConnectionType_getAuthorize, state: String? = nil) async throws {
        return try await getAuthorizeWithRequestBuilder(appId: appId, redirectUri: redirectUri, codeChallenge: codeChallenge, codeChallengeMethod: codeChallengeMethod, connectionType: connectionType, state: state).execute().body
    }

    /**
     Kick off OAuth2 flow
     - GET /apps/{app_id}/social/authorize
     - Kick off OAuth2 flow with connection provider request params described in https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
     - parameter appId: (path) App ID 
     - parameter redirectUri: (query) The URL to redirect to after the OAuth2 flow is complete. 
     - parameter codeChallenge: (query) Code challenge. 
     - parameter codeChallengeMethod: (query) Code challenge method. 
     - parameter connectionType: (query) connection type; google, github, apple, or passage to login with 
     - parameter state: (query) The state to pass through to the redirect URI. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func getAuthorizeWithRequestBuilder(appId: String, redirectUri: String, codeChallenge: String, codeChallengeMethod: String, connectionType: ConnectionType_getAuthorize, state: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/apps/{app_id}/social/authorize"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "redirect_uri": (wrappedValue: redirectUri.encodeToJSON(), isExplode: true),
            "state": (wrappedValue: state?.encodeToJSON(), isExplode: true),
            "code_challenge": (wrappedValue: codeChallenge.encodeToJSON(), isExplode: true),
            "code_challenge_method": (wrappedValue: codeChallengeMethod.encodeToJSON(), isExplode: true),
            "connection_type": (wrappedValue: connectionType.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter error
     */
    public enum ModelError_oauth2Callback: String, CaseIterable {
        case interactionRequired = "interaction_required"
        case loginRequired = "login_required"
        case accountSelectionRequired = "account_selection_required"
        case consentRequired = "consent_required"
        case invalidRequestUri = "invalid_request_uri"
        case invalidRequestObject = "invalid_request_object"
        case requestNotSupported = "request_not_supported"
        case requestUriNotSupported = "request_uri_not_supported"
        case registrationNotSupported = "registration_not_supported"
    }

    /**
     Handle OAuth2 callback
     
     - parameter appId: (path) App ID 
     - parameter code: (query) The authorization code returned by the OAuth2 provider. 
     - parameter state: (query) The state returned by the OAuth2 provider. (optional)
     - parameter error: (query) The error returned by the OAuth2 provider. (optional)
     - parameter errorDescription: (query) The error description returned by the OAuth2 provider. (optional)
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func oauth2Callback(appId: String, code: String, state: String? = nil, error: ModelError_oauth2Callback? = nil, errorDescription: String? = nil) async throws {
        return try await oauth2CallbackWithRequestBuilder(appId: appId, code: code, state: state, error: error, errorDescription: errorDescription).execute().body
    }

    /**
     Handle OAuth2 callback
     - GET /apps/{app_id}/social/oauth2_callback
     - parameter appId: (path) App ID 
     - parameter code: (query) The authorization code returned by the OAuth2 provider. 
     - parameter state: (query) The state returned by the OAuth2 provider. (optional)
     - parameter error: (query) The error returned by the OAuth2 provider. (optional)
     - parameter errorDescription: (query) The error description returned by the OAuth2 provider. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func oauth2CallbackWithRequestBuilder(appId: String, code: String, state: String? = nil, error: ModelError_oauth2Callback? = nil, errorDescription: String? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/apps/{app_id}/social/oauth2_callback"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "code": (wrappedValue: code.encodeToJSON(), isExplode: true),
            "state": (wrappedValue: state?.encodeToJSON(), isExplode: true),
            "error": (wrappedValue: error?.encodeToJSON(), isExplode: true),
            "error_description": (wrappedValue: errorDescription?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter error
     */
    public enum ModelError_oauth2CallbackDefaultDev: String, CaseIterable {
        case interactionRequired = "interaction_required"
        case loginRequired = "login_required"
        case accountSelectionRequired = "account_selection_required"
        case consentRequired = "consent_required"
        case invalidRequestUri = "invalid_request_uri"
        case invalidRequestObject = "invalid_request_object"
        case requestNotSupported = "request_not_supported"
        case requestUriNotSupported = "request_uri_not_supported"
        case registrationNotSupported = "registration_not_supported"
    }

    /**
     Handle OAuth2 callback for the default developer credentials
     
     - parameter code: (query) The authorization code returned by the OAuth2 provider. 
     - parameter state: (query) The state returned by the OAuth2 provider. (optional)
     - parameter error: (query) The error returned by the OAuth2 provider. (optional)
     - parameter errorDescription: (query) The error description returned by the OAuth2 provider. (optional)
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func oauth2CallbackDefaultDev(code: String, state: String? = nil, error: ModelError_oauth2CallbackDefaultDev? = nil, errorDescription: String? = nil) async throws {
        return try await oauth2CallbackDefaultDevWithRequestBuilder(code: code, state: state, error: error, errorDescription: errorDescription).execute().body
    }

    /**
     Handle OAuth2 callback for the default developer credentials
     - GET /social/oauth2_callback
     - parameter code: (query) The authorization code returned by the OAuth2 provider. 
     - parameter state: (query) The state returned by the OAuth2 provider. (optional)
     - parameter error: (query) The error returned by the OAuth2 provider. (optional)
     - parameter errorDescription: (query) The error description returned by the OAuth2 provider. (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func oauth2CallbackDefaultDevWithRequestBuilder(code: String, state: String? = nil, error: ModelError_oauth2CallbackDefaultDev? = nil, errorDescription: String? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/social/oauth2_callback"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "code": (wrappedValue: code.encodeToJSON(), isExplode: true),
            "state": (wrappedValue: state?.encodeToJSON(), isExplode: true),
            "error": (wrappedValue: error?.encodeToJSON(), isExplode: true),
            "error_description": (wrappedValue: errorDescription?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
