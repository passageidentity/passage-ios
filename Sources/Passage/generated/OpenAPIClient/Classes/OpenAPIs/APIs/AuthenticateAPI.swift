//
// AuthenticateAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AuthenticateAPI {

    /**
     Finish WebAuthn authentication with an optional transaction
     
     - parameter appId: (path) App ID 
     - parameter authenticateWebAuthnFinishWithTransactionRequest: (body)  
     - returns: Nonce
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func authenticateWebauthnFinishWithTransaction(appId: String, authenticateWebAuthnFinishWithTransactionRequest: AuthenticateWebAuthnFinishWithTransactionRequest) async throws -> Nonce {
        return try await authenticateWebauthnFinishWithTransactionWithRequestBuilder(appId: appId, authenticateWebAuthnFinishWithTransactionRequest: authenticateWebAuthnFinishWithTransactionRequest).execute().body
    }

    /**
     Finish WebAuthn authentication with an optional transaction
     - POST /apps/{app_id}/authenticate/transactions/webauthn/finish
     - Complete a WebAuthn authentication and authenticate the user via a transaction. This endpoint accepts and verifies the response from `navigator.credential.get()` and returns a nonce meant to be exchanged for an authentication token for the user.
     - parameter appId: (path) App ID 
     - parameter authenticateWebAuthnFinishWithTransactionRequest: (body)  
     - returns: RequestBuilder<Nonce> 
     */
    open class func authenticateWebauthnFinishWithTransactionWithRequestBuilder(appId: String, authenticateWebAuthnFinishWithTransactionRequest: AuthenticateWebAuthnFinishWithTransactionRequest) -> RequestBuilder<Nonce> {
        var localVariablePath = "/apps/{app_id}/authenticate/transactions/webauthn/finish"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticateWebAuthnFinishWithTransactionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Nonce>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Start WebAuthn authentication with an optional transaction
     
     - parameter appId: (path) App ID 
     - parameter authenticateWebAuthnStartWithTransactionRequest: (body)  (optional)
     - returns: AuthenticateWebAuthnStartWithTransactionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func authenticateWebauthnStartWithTransaction(appId: String, authenticateWebAuthnStartWithTransactionRequest: AuthenticateWebAuthnStartWithTransactionRequest? = nil) async throws -> AuthenticateWebAuthnStartWithTransactionResponse {
        return try await authenticateWebauthnStartWithTransactionWithRequestBuilder(appId: appId, authenticateWebAuthnStartWithTransactionRequest: authenticateWebAuthnStartWithTransactionRequest).execute().body
    }

    /**
     Start WebAuthn authentication with an optional transaction
     - POST /apps/{app_id}/authenticate/transactions/webauthn/start
     - Initiate a WebAuthn authentication for a user via a transaction. This endpoint creates a WebAuthn credential assertion challenge that is used to perform the authentication ceremony from the browser.
     - parameter appId: (path) App ID 
     - parameter authenticateWebAuthnStartWithTransactionRequest: (body)  (optional)
     - returns: RequestBuilder<AuthenticateWebAuthnStartWithTransactionResponse> 
     */
    open class func authenticateWebauthnStartWithTransactionWithRequestBuilder(appId: String, authenticateWebAuthnStartWithTransactionRequest: AuthenticateWebAuthnStartWithTransactionRequest? = nil) -> RequestBuilder<AuthenticateWebAuthnStartWithTransactionResponse> {
        var localVariablePath = "/apps/{app_id}/authenticate/transactions/webauthn/start"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: authenticateWebAuthnStartWithTransactionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthenticateWebAuthnStartWithTransactionResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
