//
// RegisterAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class RegisterAPI {

    /**
     Register with Magic Link
     
     - parameter appId: (path) App ID 
     - parameter user: (body) User Data 
     - returns: RegisterMagicLinkResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func registerMagicLink(appId: String, user: RegisterMagicLinkRequest) async throws -> RegisterMagicLinkResponse {
        return try await registerMagicLinkWithRequestBuilder(appId: appId, user: user).execute().body
    }

    /**
     Register with Magic Link
     - POST /apps/{app_id}/register/magic-link
     - Create a user and send an registration email or SMS to the user. The user will receive an email or text with a link to complete their registration.
     - parameter appId: (path) App ID 
     - parameter user: (body) User Data 
     - returns: RequestBuilder<RegisterMagicLinkResponse> 
     */
    open class func registerMagicLinkWithRequestBuilder(appId: String, user: RegisterMagicLinkRequest) -> RequestBuilder<RegisterMagicLinkResponse> {
        var localVariablePath = "/apps/{app_id}/register/magic-link"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RegisterMagicLinkResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Register with OTP
     
     - parameter appId: (path) App ID 
     - parameter registerOneTimePasscodeRequest: (body) User Data 
     - returns: OneTimePasscodeResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func registerOneTimePasscode(appId: String, registerOneTimePasscodeRequest: RegisterOneTimePasscodeRequest) async throws -> OneTimePasscodeResponse {
        return try await registerOneTimePasscodeWithRequestBuilder(appId: appId, registerOneTimePasscodeRequest: registerOneTimePasscodeRequest).execute().body
    }

    /**
     Register with OTP
     - POST /apps/{app_id}/register/otp
     - Create a user and send a registration email or SMS to the user. The user will receive an email or text with a one-time passcode to complete their registration.
     - parameter appId: (path) App ID 
     - parameter registerOneTimePasscodeRequest: (body) User Data 
     - returns: RequestBuilder<OneTimePasscodeResponse> 
     */
    open class func registerOneTimePasscodeWithRequestBuilder(appId: String, registerOneTimePasscodeRequest: RegisterOneTimePasscodeRequest) -> RequestBuilder<OneTimePasscodeResponse> {
        var localVariablePath = "/apps/{app_id}/register/otp"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: registerOneTimePasscodeRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OneTimePasscodeResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Finish WebAuthn Registration
     
     - parameter appId: (path) App ID 
     - parameter registerWebAuthnFinishRequest: (body) WebAuthn Response Data 
     - returns: AuthResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func registerWebauthnFinish(appId: String, registerWebAuthnFinishRequest: RegisterWebAuthnFinishRequest) async throws -> AuthResponse {
        return try await registerWebauthnFinishWithRequestBuilder(appId: appId, registerWebAuthnFinishRequest: registerWebAuthnFinishRequest).execute().body
    }

    /**
     Finish WebAuthn Registration
     - POST /apps/{app_id}/register/webauthn/finish
     - Complete a WebAuthn registration and authenticate the user. This endpoint accepts and verifies the response from `navigator.credential.create()` and returns an authentication token for the user.
     - parameter appId: (path) App ID 
     - parameter registerWebAuthnFinishRequest: (body) WebAuthn Response Data 
     - returns: RequestBuilder<AuthResponse> 
     */
    open class func registerWebauthnFinishWithRequestBuilder(appId: String, registerWebAuthnFinishRequest: RegisterWebAuthnFinishRequest) -> RequestBuilder<AuthResponse> {
        var localVariablePath = "/apps/{app_id}/register/webauthn/finish"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: registerWebAuthnFinishRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Finish WebAuthn registration with a transaction
     
     - parameter appId: (path) App ID 
     - parameter registerWebAuthnFinishWithTransactionRequest: (body)  
     - returns: Nonce
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func registerWebauthnFinishWithTransaction(appId: String, registerWebAuthnFinishWithTransactionRequest: RegisterWebAuthnFinishWithTransactionRequest) async throws -> Nonce {
        return try await registerWebauthnFinishWithTransactionWithRequestBuilder(appId: appId, registerWebAuthnFinishWithTransactionRequest: registerWebAuthnFinishWithTransactionRequest).execute().body
    }

    /**
     Finish WebAuthn registration with a transaction
     - POST /apps/{app_id}/register/transactions/webauthn/finish
     - Complete a WebAuthn registration and authenticate the user via a transaction. This endpoint accepts and verifies the response from `navigator.credential.create()` and returns a nonce meant to be exchanged for an authentication token for the user.
     - parameter appId: (path) App ID 
     - parameter registerWebAuthnFinishWithTransactionRequest: (body)  
     - returns: RequestBuilder<Nonce> 
     */
    open class func registerWebauthnFinishWithTransactionWithRequestBuilder(appId: String, registerWebAuthnFinishWithTransactionRequest: RegisterWebAuthnFinishWithTransactionRequest) -> RequestBuilder<Nonce> {
        var localVariablePath = "/apps/{app_id}/register/transactions/webauthn/finish"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: registerWebAuthnFinishWithTransactionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Nonce>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Start WebAuthn Register
     
     - parameter appId: (path) App ID 
     - parameter registerWebAuthnStartRequest: (body) User Data 
     - returns: RegisterWebAuthnStartResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func registerWebauthnStart(appId: String, registerWebAuthnStartRequest: RegisterWebAuthnStartRequest) async throws -> RegisterWebAuthnStartResponse {
        return try await registerWebauthnStartWithRequestBuilder(appId: appId, registerWebAuthnStartRequest: registerWebAuthnStartRequest).execute().body
    }

    /**
     Start WebAuthn Register
     - POST /apps/{app_id}/register/webauthn/start
     - Initiate a WebAuthn registration and create the user. This endpoint creates a WebAuthn credential creation challenge that is used to perform the registration ceremony from the browser.
     - parameter appId: (path) App ID 
     - parameter registerWebAuthnStartRequest: (body) User Data 
     - returns: RequestBuilder<RegisterWebAuthnStartResponse> 
     */
    open class func registerWebauthnStartWithRequestBuilder(appId: String, registerWebAuthnStartRequest: RegisterWebAuthnStartRequest) -> RequestBuilder<RegisterWebAuthnStartResponse> {
        var localVariablePath = "/apps/{app_id}/register/webauthn/start"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: registerWebAuthnStartRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RegisterWebAuthnStartResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Start WebAuthn registration with a transaction
     
     - parameter appId: (path) App ID 
     - parameter registerWebAuthnStartWithTransactionRequest: (body)  
     - returns: RegisterWebAuthnStartWithTransactionResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func registerWebauthnStartWithTransaction(appId: String, registerWebAuthnStartWithTransactionRequest: RegisterWebAuthnStartWithTransactionRequest) async throws -> RegisterWebAuthnStartWithTransactionResponse {
        return try await registerWebauthnStartWithTransactionWithRequestBuilder(appId: appId, registerWebAuthnStartWithTransactionRequest: registerWebAuthnStartWithTransactionRequest).execute().body
    }

    /**
     Start WebAuthn registration with a transaction
     - POST /apps/{app_id}/register/transactions/webauthn/start
     - Initiate a WebAuthn registration and create the user via a transaction. This endpoint creates a WebAuthn credential creation challenge that is used to perform the registration ceremony from the browser.
     - parameter appId: (path) App ID 
     - parameter registerWebAuthnStartWithTransactionRequest: (body)  
     - returns: RequestBuilder<RegisterWebAuthnStartWithTransactionResponse> 
     */
    open class func registerWebauthnStartWithTransactionWithRequestBuilder(appId: String, registerWebAuthnStartWithTransactionRequest: RegisterWebAuthnStartWithTransactionRequest) -> RequestBuilder<RegisterWebAuthnStartWithTransactionResponse> {
        var localVariablePath = "/apps/{app_id}/register/transactions/webauthn/start"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: registerWebAuthnStartWithTransactionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RegisterWebAuthnStartWithTransactionResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
