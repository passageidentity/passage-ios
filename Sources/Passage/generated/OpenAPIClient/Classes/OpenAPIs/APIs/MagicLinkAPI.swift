//
// MagicLinkAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MagicLinkAPI {

    /**
     Authenticate Magic Link
     
     - parameter appId: (path) App ID 
     - parameter activateMagicLinkRequest: (body) User Data 
     - returns: AuthResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func activateMagicLink(appId: String, activateMagicLinkRequest: ActivateMagicLinkRequest) async throws -> AuthResponse {
        return try await activateMagicLinkWithRequestBuilder(appId: appId, activateMagicLinkRequest: activateMagicLinkRequest).execute().body
    }

    /**
     Authenticate Magic Link
     - PATCH /apps/{app_id}/magic-link/activate
     - Authenticate a magic link for a user. This endpoint checks that the magic link is valid, then returns an authentication token for the user.
     - parameter appId: (path) App ID 
     - parameter activateMagicLinkRequest: (body) User Data 
     - returns: RequestBuilder<AuthResponse> 
     */
    open class func activateMagicLinkWithRequestBuilder(appId: String, activateMagicLinkRequest: ActivateMagicLinkRequest) -> RequestBuilder<AuthResponse> {
        var localVariablePath = "/apps/{app_id}/magic-link/activate"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: activateMagicLinkRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Magic Link Status
     
     - parameter appId: (path) App ID 
     - parameter getMagicLinkStatusRequest: (body) Magic Link ID 
     - returns: AuthResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func magicLinkStatus(appId: String, getMagicLinkStatusRequest: GetMagicLinkStatusRequest) async throws -> AuthResponse {
        return try await magicLinkStatusWithRequestBuilder(appId: appId, getMagicLinkStatusRequest: getMagicLinkStatusRequest).execute().body
    }

    /**
     Magic Link Status
     - POST /apps/{app_id}/magic-link/status
     - Check if a magic link has been activated yet or not. Once the magic link has been activated, this endpoint will return an authentication token for the user. This endpoint can be used to initiate a login on one device and then poll and wait for the login to complete on another device.
     - parameter appId: (path) App ID 
     - parameter getMagicLinkStatusRequest: (body) Magic Link ID 
     - returns: RequestBuilder<AuthResponse> 
     */
    open class func magicLinkStatusWithRequestBuilder(appId: String, getMagicLinkStatusRequest: GetMagicLinkStatusRequest) -> RequestBuilder<AuthResponse> {
        var localVariablePath = "/apps/{app_id}/magic-link/status"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getMagicLinkStatusRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
