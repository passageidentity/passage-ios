//
// UsersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UsersAPI {

    /**
     Get User
     
     - parameter appId: (path) App ID 
     - parameter identifier: (query) email or phone number 
     - returns: UserResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func checkUserIdentifier(appId: String, identifier: String) async throws -> UserResponse {
        return try await checkUserIdentifierWithRequestBuilder(appId: appId, identifier: identifier).execute().body
    }

    /**
     Get User
     - GET /apps/{app_id}/users
     - Get user information, if the user exists. This endpoint can be used to determine whether a user has an existing account and if they should login or register.
     - parameter appId: (path) App ID 
     - parameter identifier: (query) email or phone number 
     - returns: RequestBuilder<UserResponse> 
     */
    open class func checkUserIdentifierWithRequestBuilder(appId: String, identifier: String) -> RequestBuilder<UserResponse> {
        var localVariablePath = "/apps/{app_id}/users"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "identifier": (wrappedValue: identifier.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string?.removingPercentEncoding ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create User
     
     - parameter appId: (path) App ID 
     - parameter createUserParams: (body) user options 
     - returns: UserResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createUser(appId: String, createUserParams: CreateUserParams) async throws -> UserResponse {
        return try await createUserWithRequestBuilder(appId: appId, createUserParams: createUserParams).execute().body
    }

    /**
     Create User
     - POST /apps/{app_id}/users
     - Create a user
     - parameter appId: (path) App ID 
     - parameter createUserParams: (body) user options 
     - returns: RequestBuilder<UserResponse> 
     */
    open class func createUserWithRequestBuilder(appId: String, createUserParams: CreateUserParams) -> RequestBuilder<UserResponse> {
        var localVariablePath = "/apps/{app_id}/users"
        let appIdPreEscape = "\(APIHelper.mapValueToPathItem(appId))"
        let appIdPostEscape = appIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{app_id}", with: appIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createUserParams)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
